// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class MetaDataUpdated extends ethereum.Event {
  get params(): MetaDataUpdated__Params {
    return new MetaDataUpdated__Params(this);
  }
}

export class MetaDataUpdated__Params {
  _event: MetaDataUpdated;

  constructor(event: MetaDataUpdated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get projectID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ProjectCreated extends ethereum.Event {
  get params(): ProjectCreated__Params {
    return new ProjectCreated__Params(this);
  }
}

export class ProjectCreated__Params {
  _event: ProjectCreated;

  constructor(event: ProjectCreated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get projectID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ProjectRegistry__projectsResultMetadataStruct extends ethereum.Tuple {
  get protocol(): BigInt {
    return this[0].toBigInt();
  }

  get pointer(): string {
    return this[1].toString();
  }
}

export class ProjectRegistry__projectsResult {
  value0: BigInt;
  value1: Address;
  value2: ProjectRegistry__projectsResultMetadataStruct;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: ProjectRegistry__projectsResultMetadataStruct
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromTuple(this.value2));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getRecipient(): Address {
    return this.value1;
  }

  getMetadata(): ProjectRegistry__projectsResultMetadataStruct {
    return this.value2;
  }
}

export class ProjectRegistry extends ethereum.SmartContract {
  static bind(address: Address): ProjectRegistry {
    return new ProjectRegistry("ProjectRegistry", address);
  }

  getProjectOwners(projectID: BigInt): Array<Address> {
    let result = super.call(
      "getProjectOwners",
      "getProjectOwners(uint96):(address[])",
      [ethereum.Value.fromUnsignedBigInt(projectID)]
    );

    return result[0].toAddressArray();
  }

  try_getProjectOwners(projectID: BigInt): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getProjectOwners",
      "getProjectOwners(uint96):(address[])",
      [ethereum.Value.fromUnsignedBigInt(projectID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  projectOwnersCount(projectID: BigInt): BigInt {
    let result = super.call(
      "projectOwnersCount",
      "projectOwnersCount(uint96):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(projectID)]
    );

    return result[0].toBigInt();
  }

  try_projectOwnersCount(projectID: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "projectOwnersCount",
      "projectOwnersCount(uint96):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(projectID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  projects(param0: BigInt): ProjectRegistry__projectsResult {
    let result = super.call(
      "projects",
      "projects(uint96):(uint96,address,(uint256,string))",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new ProjectRegistry__projectsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      changetype<ProjectRegistry__projectsResultMetadataStruct>(
        result[2].toTuple()
      )
    );
  }

  try_projects(
    param0: BigInt
  ): ethereum.CallResult<ProjectRegistry__projectsResult> {
    let result = super.tryCall(
      "projects",
      "projects(uint96):(uint96,address,(uint256,string))",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ProjectRegistry__projectsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        changetype<ProjectRegistry__projectsResultMetadataStruct>(
          value[2].toTuple()
        )
      )
    );
  }

  projectsCount(): BigInt {
    let result = super.call("projectsCount", "projectsCount():(uint96)", []);

    return result[0].toBigInt();
  }

  try_projectsCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("projectsCount", "projectsCount():(uint96)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  projectsOwners(param0: BigInt): BigInt {
    let result = super.call(
      "projectsOwners",
      "projectsOwners(uint96):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_projectsOwners(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "projectsOwners",
      "projectsOwners(uint96):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddProjectOwnerCall extends ethereum.Call {
  get inputs(): AddProjectOwnerCall__Inputs {
    return new AddProjectOwnerCall__Inputs(this);
  }

  get outputs(): AddProjectOwnerCall__Outputs {
    return new AddProjectOwnerCall__Outputs(this);
  }
}

export class AddProjectOwnerCall__Inputs {
  _call: AddProjectOwnerCall;

  constructor(call: AddProjectOwnerCall) {
    this._call = call;
  }

  get projectID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddProjectOwnerCall__Outputs {
  _call: AddProjectOwnerCall;

  constructor(call: AddProjectOwnerCall) {
    this._call = call;
  }
}

export class CreateProjectCall extends ethereum.Call {
  get inputs(): CreateProjectCall__Inputs {
    return new CreateProjectCall__Inputs(this);
  }

  get outputs(): CreateProjectCall__Outputs {
    return new CreateProjectCall__Outputs(this);
  }
}

export class CreateProjectCall__Inputs {
  _call: CreateProjectCall;

  constructor(call: CreateProjectCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get metadata(): CreateProjectCallMetadataStruct {
    return changetype<CreateProjectCallMetadataStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class CreateProjectCall__Outputs {
  _call: CreateProjectCall;

  constructor(call: CreateProjectCall) {
    this._call = call;
  }
}

export class CreateProjectCallMetadataStruct extends ethereum.Tuple {
  get protocol(): BigInt {
    return this[0].toBigInt();
  }

  get pointer(): string {
    return this[1].toString();
  }
}

export class RemoveProjectOwnerCall extends ethereum.Call {
  get inputs(): RemoveProjectOwnerCall__Inputs {
    return new RemoveProjectOwnerCall__Inputs(this);
  }

  get outputs(): RemoveProjectOwnerCall__Outputs {
    return new RemoveProjectOwnerCall__Outputs(this);
  }
}

export class RemoveProjectOwnerCall__Inputs {
  _call: RemoveProjectOwnerCall;

  constructor(call: RemoveProjectOwnerCall) {
    this._call = call;
  }

  get projectID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get prevOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RemoveProjectOwnerCall__Outputs {
  _call: RemoveProjectOwnerCall;

  constructor(call: RemoveProjectOwnerCall) {
    this._call = call;
  }
}

export class UpdateProjectMetaDataCall extends ethereum.Call {
  get inputs(): UpdateProjectMetaDataCall__Inputs {
    return new UpdateProjectMetaDataCall__Inputs(this);
  }

  get outputs(): UpdateProjectMetaDataCall__Outputs {
    return new UpdateProjectMetaDataCall__Outputs(this);
  }
}

export class UpdateProjectMetaDataCall__Inputs {
  _call: UpdateProjectMetaDataCall;

  constructor(call: UpdateProjectMetaDataCall) {
    this._call = call;
  }

  get projectID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get metadata(): UpdateProjectMetaDataCallMetadataStruct {
    return changetype<UpdateProjectMetaDataCallMetadataStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class UpdateProjectMetaDataCall__Outputs {
  _call: UpdateProjectMetaDataCall;

  constructor(call: UpdateProjectMetaDataCall) {
    this._call = call;
  }
}

export class UpdateProjectMetaDataCallMetadataStruct extends ethereum.Tuple {
  get protocol(): BigInt {
    return this[0].toBigInt();
  }

  get pointer(): string {
    return this[1].toString();
  }
}
